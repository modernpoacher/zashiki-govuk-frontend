"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.transformAll=exports.transformOne=exports.transformElements=exports.transformFields=exports.transformElementsForField=exports.transformElementsForEnum=exports.transformField=exports.transformEnum=exports.transformTitleToLegend=exports.transformTitleToLabel=exports.transformDescriptionToHint=exports.getName=exports.getComponent=exports.getType=exports.getAnyOf=exports.hasAnyOf=exports.getOneOf=exports.hasOneOf=exports.getEnum=exports.hasEnum=void 0;var _fromSchema=_interopRequireDefault(require("shinkansen-transmission/lib/transmission/from-schema"));var _fromDocument=_interopRequireDefault(require("shinkansen-transmission/lib/transmission/from-document"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const hasEnum=(field={})=>Reflect.has(field,'enum');exports.hasEnum=hasEnum;const getEnum=(field={})=>Reflect.get(field,'enum');exports.getEnum=getEnum;const hasOneOf=(field={})=>Reflect.has(field,'oneOf');exports.hasOneOf=hasOneOf;const getOneOf=(field={})=>Reflect.get(field,'oneOf');exports.getOneOf=getOneOf;const hasAnyOf=(field={})=>Reflect.has(field,'anyOf');exports.hasAnyOf=hasAnyOf;const getAnyOf=(field={})=>Reflect.get(field,'anyOf');exports.getAnyOf=getAnyOf;const getType=({type}={})=>type?{type}:{};exports.getType=getType;const getComponent=({component}={})=>component?{component}:{};exports.getComponent=getComponent;const getName=({name}={})=>name?{name}:{};exports.getName=getName;const transformDescriptionToHint=(field={},text)=>({...field,...(text?{hint:{text}}:{})});exports.transformDescriptionToHint=transformDescriptionToHint;const transformTitleToLabel=(field={},text)=>({...field,...(text?{label:{text}}:{})});exports.transformTitleToLabel=transformTitleToLabel;const transformTitleToLegend=(field={},text)=>({...field,...(text?{legend:{text}}:{})});exports.transformTitleToLegend=transformTitleToLegend;const transformEnum=({items=[],selectedIndex,name,id=name,...field})=>({...field,items:items.map((text,value)=>({text,value,selected:value===selectedIndex})),...(name?{name}:{}),...(id?{id}:{})});exports.transformEnum=transformEnum;const transformField=({name,id=name,...field}={})=>({...field,...(name?{name}:{}),...(id?{id}:{})});exports.transformField=transformField;const transformElementsForEnum=({title,description,enum:{...field}}={})=>transformDescriptionToHint(transformTitleToLabel(transformEnum(field),title),description);exports.transformElementsForEnum=transformElementsForEnum;const transformElementsForField=({title,description,field}={})=>transformDescriptionToHint(transformTitleToLabel(transformField(field),title),description);exports.transformElementsForField=transformElementsForField;const transformFields=(fields=[])=>fields.map(transform);exports.transformFields=transformFields;const transformElements=elements=>{if(hasEnum(elements)){return{enum:transformElementsForEnum(elements)};}else{if(hasOneOf(elements)){}else{if(hasAnyOf(elements)){}else{return{params:transformElementsForField(elements)};}}}};exports.transformElements=transformElements;const transformOne=({meta={},elements={}}={})=>({...getType(meta),...getComponent(meta),...transformElements(elements)});exports.transformOne=transformOne;const transformAll=({meta={},elements:{title,description,fields,...field}={}}={})=>({...getType(meta),...getComponent(meta),params:transformDescriptionToHint(transformTitleToLegend(transformField(field),title),description),fields:transformFields(fields)});exports.transformAll=transformAll;const transform=(schema={})=>{const{meta:{type}={}}=schema;return type==='object'||type==='array'?transformAll(schema):transformOne(schema);};var _default=(definition,response,components)=>transform((0,_fromSchema.default)(definition,(0,_fromDocument.default)(response,definition),components));exports.default=_default;