"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformToCheckboxes=transformToCheckboxes;exports.transformToDateInput=transformToDateInput;exports.transformToFieldset=transformToFieldset;exports.transformToFileUpload=transformToFileUpload;exports.transformToRadios=transformToRadios;exports.transformToSelect=transformToSelect;exports.transformToInput=transformToInput;exports.transformToComponent=transformToComponent;exports.default=exports.transformAll=exports.transformOne=exports.transformElementsForField=exports.transformElementsForOneOf=exports.transformElementsForAnyOf=exports.transformElementsForEnum=exports.transformField=exports.transformFields=exports.transformOneOf=exports.transformAnyOf=exports.transformEnum=exports.transformTitleToFieldsetLegend=exports.transformTitleToLegend=exports.transformTitleToLabel=exports.transformTitleToText=exports.transformDescriptionToHint=exports.getName=exports.getComponent=exports.getType=exports.getAnyOf=exports.hasAnyOf=exports.getOneOf=exports.hasOneOf=exports.getEnum=exports.hasEnum=void 0;var _toZashiki=_interopRequireDefault(require("shinkansen-transmission/lib/transmission/to-zashiki"));var _fromDocumentToHash=_interopRequireDefault(require("shinkansen-transmission/lib/transmission/from-document-to-hash"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const hasEnum=(field={})=>Reflect.has(field,'enum');exports.hasEnum=hasEnum;const getEnum=(field={})=>Reflect.get(field,'enum');exports.getEnum=getEnum;const hasOneOf=(field={})=>Reflect.has(field,'oneOf');exports.hasOneOf=hasOneOf;const getOneOf=(field={})=>Reflect.get(field,'oneOf');exports.getOneOf=getOneOf;const hasAnyOf=(field={})=>Reflect.has(field,'anyOf');exports.hasAnyOf=hasAnyOf;const getAnyOf=(field={})=>Reflect.get(field,'anyOf');exports.getAnyOf=getAnyOf;const getType=({type}={})=>type?{type}:{};exports.getType=getType;const getComponent=({component}={})=>component?{component}:{};exports.getComponent=getComponent;const getName=({name}={})=>name?{name}:{};exports.getName=getName;const transformDescriptionToHint=(field={},text)=>({...field,...(text?{hint:{text}}:{})});exports.transformDescriptionToHint=transformDescriptionToHint;const transformTitleToText=(field={},text)=>({...field,...(text?{text}:{})});exports.transformTitleToText=transformTitleToText;const transformTitleToLabel=(field={},text)=>({...field,...(text?{label:{text}}:{})});exports.transformTitleToLabel=transformTitleToLabel;const transformTitleToLegend=(field={},text)=>({...field,...(text?{legend:{text}}:{})});exports.transformTitleToLegend=transformTitleToLegend;const transformTitleToFieldsetLegend=(field={},text)=>({...field,...(text?{fieldset:{legend:{text}}}:{})});exports.transformTitleToFieldsetLegend=transformTitleToFieldsetLegend;const transformEnum=({items=[],selectedIndex,name,id=name,...field})=>({...field,items:items.map((value,index)=>({text:String(value),value:String(index),selected:selectedIndex===index})),...(name?{name}:{}),...(id?{id}:{})});exports.transformEnum=transformEnum;const transformAnyOf=({items=[],selectedIndex,name,id=name,...field})=>({...field,items:items.map(({elements:{title,description,field:{name,id=name}={}}},index)=>transformDescriptionToHint(transformTitleToText({value:String(index),name,id,checked:selectedIndex===index},title),description)),...(name?{name}:{}),...(id?{id}:{})});exports.transformAnyOf=transformAnyOf;const transformOneOf=({items=[],selectedIndex,name,id=name,...field})=>({...field,items:items.map(({elements:{title,description,field:{name,id=name}={}}},index)=>transformDescriptionToHint(transformTitleToText({value:String(index),name,id,checked:selectedIndex===index},title),description)),...(name?{name}:{}),...(id?{id}:{})});exports.transformOneOf=transformOneOf;const transformFields=(fields=[])=>fields.map(transform);exports.transformFields=transformFields;const transformField=({name,id=name,...field}={})=>({...field,...(name?{name}:{}),...(id?{id}:{})});exports.transformField=transformField;const transformElementsForEnum=({title,description,enum:{...field}}={})=>transformDescriptionToHint(transformTitleToLabel(transformEnum(field),title),description);exports.transformElementsForEnum=transformElementsForEnum;const transformElementsForAnyOf=({title,description,anyOf:{...field}}={})=>transformDescriptionToHint(transformTitleToFieldsetLegend(transformAnyOf(field),title),description);exports.transformElementsForAnyOf=transformElementsForAnyOf;const transformElementsForOneOf=({title,description,oneOf:{...field}}={})=>transformDescriptionToHint(transformTitleToFieldsetLegend(transformOneOf(field),title),description);exports.transformElementsForOneOf=transformElementsForOneOf;const transformElementsForField=({title,description,field}={})=>transformDescriptionToHint(transformTitleToLabel(transformField(field),title),description);exports.transformElementsForField=transformElementsForField;function transformToCheckboxes(meta,elements){}function transformToDateInput(meta,elements){}function transformToFieldset(meta,elements){}function transformToFileUpload(meta,elements){}function transformToRadios(meta,elements){}function transformToSelect(meta,elements){}function transformToInput(meta,elements){if(hasEnum(elements)){return{enum:transformElementsForEnum(elements)};}else{if(hasAnyOf(elements)){return{anyOf:transformElementsForAnyOf(elements)};}else{if(hasOneOf(elements)){return{oneOf:transformElementsForOneOf(elements)};}else{return{params:transformElementsForField(elements)};}}}}function transformToComponent(meta,elements){const{component}=meta;switch(component){case'checkboxes':return transformToCheckboxes(meta,elements);case'date-input':return transformToDateInput(meta,elements);case'fieldset':return transformToFieldset(meta,elements);case'file-upload':return transformToFileUpload(meta,elements);case'radios':return transformToRadios(meta,elements);case'select':return transformToSelect(meta,elements);default:return transformToInput(meta,elements);}}const transformOne=({meta={},elements={}}={})=>({...getType(meta),...getComponent(meta),...transformToComponent(meta,elements)});exports.transformOne=transformOne;const transformAll=({meta={},elements:{title,description,fields,...field}={}}={})=>({...getType(meta),...getComponent(meta),params:transformDescriptionToHint(transformTitleToLegend(transformField(field),title),description),fields:transformFields(fields)});exports.transformAll=transformAll;const transform=(schema={})=>{const{meta:{type}={}}=schema;return type==='object'||type==='array'?transformAll(schema):transformOne(schema);};var _default=(definition,response,components)=>transform((0,_toZashiki.default)(definition,response!==undefined?(0,_fromDocumentToHash.default)(response,definition):{},components));exports.default=_default;